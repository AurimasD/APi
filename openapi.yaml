openapi: 3.0.1
info:
  title: My SEB API
  version: '1.0'
  description: an api to do some stuff...
  termsOfService: https://www.example.com
  contact:
    email: support@example.com
    name: Support
    url: https://www.example.com/contact
  license:
    name: License
    url: https://www.example.com/license
servers:
  - url: http://localhost:3000
    variables: {}
    description: my local fake server
  - url: https://my-json-server.typicode.com/bearc0025/api
    variables: {}
    description: my fake github server
  - url: https://www.example.com:{port}/{version}
    variables:
      port:
        default: '3000'
        enum:
          - '3000'
          - '3001'
        description: '3000: dev, 3001: test'
      version:
        default: v2
        enum:
          - v2
          - v1
        description: versions
    description: development server
paths:
  /users:
    summary: users path level operations
    description: returns users from server, create a user
    get:
      summary: fetch users from server
      description: returns users from online
      operationId: fetchUsers
      responses:
        '200':
          $ref: '#/components/responses/UserArrayResponseBody'
        default:
          description: Default error sample response
      tags:
        - users
    post:
      summary: create a new user
      description: stores user on server
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/UserPostBody'
      responses:
        '201':
          $ref: '#/components/responses/UserRespBody'
        default:
          description: Default error sample response
      tags:
        - users
  /users/{userId}:
    summary: individual user operations
    description: single user update, delete, read
    parameters:
      - name: userId
        in: path
        required: true
        description: user id
        schema:
          type: string
          example: 1234abc
    get:
      summary: fetch a user from the server
      description: returns user from online
      operationId: fetchUser
      responses:
        '200':
          $ref: '#/components/responses/UserRespBody'
        default:
          description: Default error sample response
      tags:
        - users
components:
  responses:
    UserArrayResponseBody:
      description: user array
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserArray'
    UserRespBody:
      description: success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FullUser'
  requestBodies:
    UserPostBody:
      description: request body
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostNewUser'
  schemas:
    UserArray:
      type: array
      items:
        $ref: '#/components/schemas/FullUser'
    PostNewUser:
      type: object
      properties:
        username:
          type: string
          example: bearc
        score:
          type: integer
          example: 234
        action:
          type: boolean
          example: true
    FullUser:
      allOf:
        - $ref: '#/components/schemas/PostNewUser'
        - type: object
          properties:
            id:
              type: string
              example: 1234abc
