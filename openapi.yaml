openapi: 3.0.1
info:
  title: My API
  version: 1.0.1
  description: some great api
  termsOfService: https://www.example.com/
  contact:
    email: support@example.com
    name: My Team
    url: https://www.example.com/contact
  license:
    name: My License
    url: https://www.example.com/license
servers:
  - url: http://localhost:3000
    variables: {}
    description: my local json server
  - url: https://my-json-server.typicode.com/bearc0025/api
    variables: {}
    description: github mock server
  - url: https://www.example.com:{port}/{version}
    variables:
      port:
        default: '8000'
        enum:
          - '8000'
          - '8001'
        description: port variable
      version:
        default: v3
        enum:
          - v3
          - v2
          - v1
        description: api version
    description: example variable server
paths:
  /users:
    summary: fetch all, create new
    description: Returns all items from the server, create new item with generated id
    get:
      summary: Users table, max 100
      description: return all users from the server
      operationId: fetchUsers
      responses:
        '200':
          $ref: '#/components/responses/UserArrayResponseBody'
        default:
          description: Default error sample response
      tags:
        - users
    post:
      summary: Create new user
      description: store user on server
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/UserPostBody'
      responses:
        '201':
          $ref: '#/components/responses/UserRespBody'
        default:
          description: Default error sample response
      tags:
        - users
  /users/{userId}:
    summary: User level operations
    description: Fetch, update, delete a user
    get:
      summary: Fetch a user
      description: returns a user from the server
      operationId: fetchUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: qwerty
      responses:
        '200':
          $ref: '#/components/responses/UserRespBody'
        default:
          description: Default error sample response
      tags:
        - users
components:
  responses:
    UserArrayResponseBody:
      description: array of users
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserArray'
    UserRespBody:
      description: full user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FullUser'
  requestBodies:
    UserPostBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostNewUser'
  schemas:
    UserArray:
      type: array
      items:
        $ref: '#/components/schemas/FullUser'
    PostNewUser:
      type: object
      properties:
        username:
          type: string
          example: bear
        score:
          type: integer
          example: 67
        active:
          type: boolean
          example: true
    FullUser:
      allOf:
        - $ref: '#/components/schemas/PostNewUser'
        - type: object
          properties:
            id:
              type: string
              example: qwerty
